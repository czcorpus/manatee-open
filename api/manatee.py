# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_manatee')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_manatee')
    _manatee = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_manatee', [dirname(__file__)])
        except ImportError:
            import _manatee
            return _manatee
        try:
            _mod = imp.load_module('_manatee', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _manatee = swig_import_helper()
    del swig_import_helper
else:
    import _manatee
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class manatee_SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, manatee_SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, manatee_SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _manatee.delete_manatee_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _manatee.manatee_SwigPyIterator_value(self)

    def incr(self, n=1):
        return _manatee.manatee_SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _manatee.manatee_SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _manatee.manatee_SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _manatee.manatee_SwigPyIterator_equal(self, x)

    def copy(self):
        return _manatee.manatee_SwigPyIterator_copy(self)

    def __next__(self):
        return _manatee.manatee_SwigPyIterator___next__(self)

    def previous(self):
        return _manatee.manatee_SwigPyIterator_previous(self)

    def advance(self, n):
        return _manatee.manatee_SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _manatee.manatee_SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _manatee.manatee_SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _manatee.manatee_SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _manatee.manatee_SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _manatee.manatee_SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _manatee.manatee_SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

    def next(self, *args):
        val = _manatee.manatee_SwigPyIterator_next(self, *args)

        if getEncoding() and type(val) == str:
            val = unicode(val, getEncoding(), errors='replace')


        return val

manatee_SwigPyIterator_swigregister = _manatee.manatee_SwigPyIterator_swigregister
manatee_SwigPyIterator_swigregister(manatee_SwigPyIterator)

class EvalQueryException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EvalQueryException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EvalQueryException, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        this = _manatee.new_EvalQueryException(name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _manatee.EvalQueryException___str__(self)
    __swig_destroy__ = _manatee.delete_EvalQueryException
    __del__ = lambda self: None
EvalQueryException_swigregister = _manatee.EvalQueryException_swigregister
EvalQueryException_swigregister(EvalQueryException)

class FileAccessError(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileAccessError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileAccessError, name)
    __repr__ = _swig_repr

    def __init__(self, filename, where):
        this = _manatee.new_FileAccessError(filename, where)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _manatee.FileAccessError___str__(self)
    __swig_destroy__ = _manatee.delete_FileAccessError
    __del__ = lambda self: None
FileAccessError_swigregister = _manatee.FileAccessError_swigregister
FileAccessError_swigregister(FileAccessError)

class AttrNotFound(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttrNotFound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttrNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        this = _manatee.new_AttrNotFound(name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _manatee.AttrNotFound___str__(self)
    __swig_destroy__ = _manatee.delete_AttrNotFound
    __del__ = lambda self: None
AttrNotFound_swigregister = _manatee.AttrNotFound_swigregister
AttrNotFound_swigregister(AttrNotFound)

class ConcNotFound(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConcNotFound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConcNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        this = _manatee.new_ConcNotFound(name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _manatee.ConcNotFound___str__(self)
    __swig_destroy__ = _manatee.delete_ConcNotFound
    __del__ = lambda self: None
ConcNotFound_swigregister = _manatee.ConcNotFound_swigregister
ConcNotFound_swigregister(ConcNotFound)

class CorpInfoNotFound(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CorpInfoNotFound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CorpInfoNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        this = _manatee.new_CorpInfoNotFound(name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _manatee.CorpInfoNotFound___str__(self)
    __swig_destroy__ = _manatee.delete_CorpInfoNotFound
    __del__ = lambda self: None
CorpInfoNotFound_swigregister = _manatee.CorpInfoNotFound_swigregister
CorpInfoNotFound_swigregister(CorpInfoNotFound)

class FastStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FastStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FastStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self):
        return _manatee.FastStream_next(self)

    def peek(self):
        return _manatee.FastStream_peek(self)

    def find(self, pos):
        return _manatee.FastStream_find(self, pos)

    def end(self):
        return _manatee.FastStream_end(self)

    def collocs(self, colls):
        return _manatee.FastStream_collocs(self, colls)
    __swig_destroy__ = _manatee.delete_FastStream
    __del__ = lambda self: None
FastStream_swigregister = _manatee.FastStream_swigregister
FastStream_swigregister(FastStream)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _manatee.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _manatee.IntVector___nonzero__(self)

    def __bool__(self):
        return _manatee.IntVector___bool__(self)

    def __len__(self):
        return _manatee.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _manatee.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _manatee.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _manatee.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _manatee.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _manatee.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _manatee.IntVector___setitem__(self, *args)

    def pop(self):
        return _manatee.IntVector_pop(self)

    def append(self, x):
        return _manatee.IntVector_append(self, x)

    def empty(self):
        return _manatee.IntVector_empty(self)

    def size(self):
        return _manatee.IntVector_size(self)

    def swap(self, v):
        return _manatee.IntVector_swap(self, v)

    def begin(self):
        return _manatee.IntVector_begin(self)

    def end(self):
        return _manatee.IntVector_end(self)

    def rbegin(self):
        return _manatee.IntVector_rbegin(self)

    def rend(self):
        return _manatee.IntVector_rend(self)

    def clear(self):
        return _manatee.IntVector_clear(self)

    def get_allocator(self):
        return _manatee.IntVector_get_allocator(self)

    def pop_back(self):
        return _manatee.IntVector_pop_back(self)

    def erase(self, *args):
        return _manatee.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _manatee.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _manatee.IntVector_push_back(self, x)

    def front(self):
        return _manatee.IntVector_front(self)

    def back(self):
        return _manatee.IntVector_back(self)

    def assign(self, n, x):
        return _manatee.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _manatee.IntVector_resize(self, *args)

    def insert(self, *args):
        return _manatee.IntVector_insert(self, *args)

    def reserve(self, n):
        return _manatee.IntVector_reserve(self, n)

    def capacity(self):
        return _manatee.IntVector_capacity(self)

    def __str__ (self):
        return "[" + ", ".join(map(str,self)) + "]"

    __swig_destroy__ = _manatee.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _manatee.IntVector_swigregister
IntVector_swigregister(IntVector)

class NumVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _manatee.NumVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _manatee.NumVector___nonzero__(self)

    def __bool__(self):
        return _manatee.NumVector___bool__(self)

    def __len__(self):
        return _manatee.NumVector___len__(self)

    def __getslice__(self, i, j):
        return _manatee.NumVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _manatee.NumVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _manatee.NumVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _manatee.NumVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _manatee.NumVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _manatee.NumVector___setitem__(self, *args)

    def pop(self):
        return _manatee.NumVector_pop(self)

    def append(self, x):
        return _manatee.NumVector_append(self, x)

    def empty(self):
        return _manatee.NumVector_empty(self)

    def size(self):
        return _manatee.NumVector_size(self)

    def swap(self, v):
        return _manatee.NumVector_swap(self, v)

    def begin(self):
        return _manatee.NumVector_begin(self)

    def end(self):
        return _manatee.NumVector_end(self)

    def rbegin(self):
        return _manatee.NumVector_rbegin(self)

    def rend(self):
        return _manatee.NumVector_rend(self)

    def clear(self):
        return _manatee.NumVector_clear(self)

    def get_allocator(self):
        return _manatee.NumVector_get_allocator(self)

    def pop_back(self):
        return _manatee.NumVector_pop_back(self)

    def erase(self, *args):
        return _manatee.NumVector_erase(self, *args)

    def __init__(self, *args):
        this = _manatee.new_NumVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _manatee.NumVector_push_back(self, x)

    def front(self):
        return _manatee.NumVector_front(self)

    def back(self):
        return _manatee.NumVector_back(self)

    def assign(self, n, x):
        return _manatee.NumVector_assign(self, n, x)

    def resize(self, *args):
        return _manatee.NumVector_resize(self, *args)

    def insert(self, *args):
        return _manatee.NumVector_insert(self, *args)

    def reserve(self, n):
        return _manatee.NumVector_reserve(self, n)

    def capacity(self):
        return _manatee.NumVector_capacity(self)

    def __str__ (self):
        return "[" + ", ".join(map(str,self)) + "]"

    __swig_destroy__ = _manatee.delete_NumVector
    __del__ = lambda self: None
NumVector_swigregister = _manatee.NumVector_swigregister
NumVector_swigregister(NumVector)

class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _manatee.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _manatee.StrVector___nonzero__(self)

    def __bool__(self):
        return _manatee.StrVector___bool__(self)

    def __len__(self):
        return _manatee.StrVector___len__(self)

    def __getslice__(self, i, j):
        return _manatee.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _manatee.StrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _manatee.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _manatee.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _manatee.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _manatee.StrVector___setitem__(self, *args)

    def pop(self):
        return _manatee.StrVector_pop(self)

    def append(self, x):
        return _manatee.StrVector_append(self, x)

    def empty(self):
        return _manatee.StrVector_empty(self)

    def size(self):
        return _manatee.StrVector_size(self)

    def swap(self, v):
        return _manatee.StrVector_swap(self, v)

    def begin(self):
        return _manatee.StrVector_begin(self)

    def end(self):
        return _manatee.StrVector_end(self)

    def rbegin(self):
        return _manatee.StrVector_rbegin(self)

    def rend(self):
        return _manatee.StrVector_rend(self)

    def clear(self):
        return _manatee.StrVector_clear(self)

    def get_allocator(self):
        return _manatee.StrVector_get_allocator(self)

    def pop_back(self):
        return _manatee.StrVector_pop_back(self)

    def erase(self, *args):
        return _manatee.StrVector_erase(self, *args)

    def __init__(self, *args):
        this = _manatee.new_StrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _manatee.StrVector_push_back(self, x)

    def front(self):
        return _manatee.StrVector_front(self)

    def back(self):
        return _manatee.StrVector_back(self)

    def assign(self, n, x):
        return _manatee.StrVector_assign(self, n, x)

    def resize(self, *args):
        return _manatee.StrVector_resize(self, *args)

    def insert(self, *args):
        return _manatee.StrVector_insert(self, *args)

    def reserve(self, n):
        return _manatee.StrVector_reserve(self, n)

    def capacity(self):
        return _manatee.StrVector_capacity(self)

    def __str__ (self):
        if getEncoding():
            s = u"[" + u", ".join(self) + u"]"
            return s.encode(getEncoding())
        else:
            return "[" + ", ".join(self) + "]"

    __swig_destroy__ = _manatee.delete_StrVector
    __del__ = lambda self: None
StrVector_swigregister = _manatee.StrVector_swigregister
StrVector_swigregister(StrVector)


def setEncoding(enc):
    return _manatee.setEncoding(enc)
setEncoding = _manatee.setEncoding

def getEncoding():
    return _manatee.getEncoding()
getEncoding = _manatee.getEncoding

def version():
    return _manatee.version()
version = _manatee.version
class Frequency(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frequency, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Frequency, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def freq(self, id):
        return _manatee.Frequency_freq(self, id)
    __swig_destroy__ = _manatee.delete_Frequency
    __del__ = lambda self: None
Frequency_swigregister = _manatee.Frequency_swigregister
Frequency_swigregister(Frequency)

class WordList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def id_range(self):
        return _manatee.WordList_id_range(self)

    def id2str(self, id):
        return _manatee.WordList_id2str(self, id)

    def str2id(self, str):
        return _manatee.WordList_str2id(self, str)

    def id2poss(self, id):
        return _manatee.WordList_id2poss(self, id)

    def idposat(self, pos):
        return _manatee.WordList_idposat(self, pos)

    def regexp2ids(self, pat, ignorecase, filter_pat=None):
        return _manatee.WordList_regexp2ids(self, pat, ignorecase, filter_pat)

    def regexp2strids(self, pat, ignorecase, filter_pat=None):
        return _manatee.WordList_regexp2strids(self, pat, ignorecase, filter_pat)

    def dump_str(self):
        return _manatee.WordList_dump_str(self)
    __swig_getmethods__["attr_path"] = _manatee.WordList_attr_path_get
    if _newclass:
        attr_path = _swig_property(_manatee.WordList_attr_path_get)

    def get_stat(self, frqtype):
        return _manatee.WordList_get_stat(self, frqtype)
    __swig_destroy__ = _manatee.delete_WordList
    __del__ = lambda self: None
WordList_swigregister = _manatee.WordList_swigregister
WordList_swigregister(WordList)


def languages(out):
    return _manatee.languages(out)
languages = _manatee.languages
class IntGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntGenerator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self):
        return _manatee.IntGenerator_next(self)

    def end(self):
        return _manatee.IntGenerator_end(self)
    __swig_destroy__ = _manatee.delete_IntGenerator
    __del__ = lambda self: None
IntGenerator_swigregister = _manatee.IntGenerator_swigregister
IntGenerator_swigregister(IntGenerator)

class StringGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringGenerator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self):
        return _manatee.StringGenerator_next(self)

    def end(self):
        return _manatee.StringGenerator_end(self)
    __swig_destroy__ = _manatee.delete_StringGenerator
    __del__ = lambda self: None
StringGenerator_swigregister = _manatee.StringGenerator_swigregister
StringGenerator_swigregister(StringGenerator)

class IdStrGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdStrGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdStrGenerator, name)
    __repr__ = _swig_repr

    def next(self):
        return _manatee.IdStrGenerator_next(self)

    def end(self):
        return _manatee.IdStrGenerator_end(self)

    def getId(self):
        return _manatee.IdStrGenerator_getId(self)

    def getStr(self):
        return _manatee.IdStrGenerator_getStr(self)

    def __init__(self):
        this = _manatee.new_IdStrGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _manatee.delete_IdStrGenerator
    __del__ = lambda self: None
IdStrGenerator_swigregister = _manatee.IdStrGenerator_swigregister
IdStrGenerator_swigregister(IdStrGenerator)

class RangeStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RangeStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RangeStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self):
        return _manatee.RangeStream_next(self)

    def end(self):
        return _manatee.RangeStream_end(self)

    def peek_beg(self):
        return _manatee.RangeStream_peek_beg(self)

    def peek_end(self):
        return _manatee.RangeStream_peek_end(self)

    def find_beg(self, pos):
        return _manatee.RangeStream_find_beg(self, pos)

    def find_end(self, pos):
        return _manatee.RangeStream_find_end(self, pos)

    def count_rest(self):
        return _manatee.RangeStream_count_rest(self)

    def collocs(self, colls):
        return _manatee.RangeStream_collocs(self, colls)
    __swig_destroy__ = _manatee.delete_RangeStream
    __del__ = lambda self: None
RangeStream_swigregister = _manatee.RangeStream_swigregister
RangeStream_swigregister(RangeStream)

class IDIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self):
        return _manatee.IDIterator_next(self)

    def __getitem__(self, array_index):
        return _manatee.IDIterator___getitem__(self, array_index)

    def __len__(self):
        return _manatee.IDIterator___len__(self)
    __swig_destroy__ = _manatee.delete_IDIterator
    __del__ = lambda self: None
IDIterator_swigregister = _manatee.IDIterator_swigregister
IDIterator_swigregister(IDIterator)

class TextIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self):
        return _manatee.TextIterator_next(self)
    __swig_destroy__ = _manatee.delete_TextIterator
    __del__ = lambda self: None
TextIterator_swigregister = _manatee.TextIterator_swigregister
TextIterator_swigregister(TextIterator)

class PosAttr(WordList):
    __swig_setmethods__ = {}
    for _s in [WordList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosAttr, name, value)
    __swig_getmethods__ = {}
    for _s in [WordList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosAttr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def id_range(self):
        return _manatee.PosAttr_id_range(self)

    def id2str(self, id):
        return _manatee.PosAttr_id2str(self, id)

    def str2id(self, str):
        return _manatee.PosAttr_str2id(self, str)

    def pos2id(self, pos):
        return _manatee.PosAttr_pos2id(self, pos)

    def pos2str(self, pos):
        return _manatee.PosAttr_pos2str(self, pos)

    def posat(self, pos):
        return _manatee.PosAttr_posat(self, pos)

    def textat(self, pos):
        return _manatee.PosAttr_textat(self, pos)

    def id2poss(self, id):
        return _manatee.PosAttr_id2poss(self, id)

    def dynid2srcids(self, id):
        return _manatee.PosAttr_dynid2srcids(self, id)

    def regexp2poss(self, pat, ignorecase):
        return _manatee.PosAttr_regexp2poss(self, pat, ignorecase)

    def regexp2ids(self, pat, ignorecase, filter_pat=None):
        return _manatee.PosAttr_regexp2ids(self, pat, ignorecase, filter_pat)

    def regexp2ids_filtered(self, pat, filter_pat):
        return _manatee.PosAttr_regexp2ids_filtered(self, pat, filter_pat)

    def dump_str(self):
        return _manatee.PosAttr_dump_str(self)

    def freq(self, id):
        return _manatee.PosAttr_freq(self, id)

    def size(self):
        return _manatee.PosAttr_size(self)
    __swig_getmethods__["name"] = _manatee.PosAttr_name_get
    if _newclass:
        name = _swig_property(_manatee.PosAttr_name_get)
    __swig_getmethods__["attr_path"] = _manatee.PosAttr_attr_path_get
    if _newclass:
        attr_path = _swig_property(_manatee.PosAttr_attr_path_get)
    __swig_destroy__ = _manatee.delete_PosAttr
    __del__ = lambda self: None
PosAttr_swigregister = _manatee.PosAttr_swigregister
PosAttr_swigregister(PosAttr)

class Structure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Structure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Structure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def size(self):
        return _manatee.Structure_size(self)

    def search_size(self):
        return _manatee.Structure_search_size(self)

    def get_attr(self, attr_name):
        return _manatee.Structure_get_attr(self, attr_name)
    __swig_getmethods__["name"] = _manatee.Structure_name_get
    if _newclass:
        name = _swig_property(_manatee.Structure_name_get)

    def num_at_pos(self, pos):
        return _manatee.Structure_num_at_pos(self, pos)

    def num_next_pos(self, pos):
        return _manatee.Structure_num_next_pos(self, pos)

    def beg(self, n):
        return _manatee.Structure_beg(self, n)

    def end(self, n):
        return _manatee.Structure_end(self, n)

    def whole(self):
        return _manatee.Structure_whole(self)

    def attr_val(self, aname, attr_id):
        return _manatee.Structure_attr_val(self, aname, attr_id)
    __swig_destroy__ = _manatee.delete_Structure
    __del__ = lambda self: None
Structure_swigregister = _manatee.Structure_swigregister
Structure_swigregister(Structure)

class Corpus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Corpus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Corpus, name)
    __repr__ = _swig_repr

    def __init__(self, corp_name):
        this = _manatee.new_Corpus(corp_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _manatee.Corpus_size(self)

    def search_size(self):
        return _manatee.Corpus_search_size(self)

    def get_attr(self, name, struct_attr=False):
        return _manatee.Corpus_get_attr(self, name, struct_attr)

    def get_struct(self, name):
        return _manatee.Corpus_get_struct(self, name)

    def get_info(self):
        return _manatee.Corpus_get_info(self)

    def get_conf(self, item):
        return _manatee.Corpus_get_conf(self, item)

    def get_conffile(self):
        return _manatee.Corpus_get_conffile(self)

    def get_confpath(self):
        return _manatee.Corpus_get_confpath(self)

    def set_default_attr(self, attname):
        return _manatee.Corpus_set_default_attr(self, attname)

    def set_reference_corpus(self, refcorp):
        return _manatee.Corpus_set_reference_corpus(self, refcorp)

    def filter_query(self, s):
        return _manatee.Corpus_filter_query(self, s)

    def get_sizes(self):
        return _manatee.Corpus_get_sizes(self)

    def compile_frq(self, attr):
        return _manatee.Corpus_compile_frq(self, attr)

    def compile_arf(self, attr):
        return _manatee.Corpus_compile_arf(self, attr)

    def compile_aldf(self, attr):
        return _manatee.Corpus_compile_aldf(self, attr)

    def compile_star(self, attr, docstruc, structattr):
        return _manatee.Corpus_compile_star(self, attr, docstruc, structattr)

    def compile_docf(self, attr, docstruc):
        return _manatee.Corpus_compile_docf(self, attr, docstruc)

    def get_wordlist(self, path):
        return _manatee.Corpus_get_wordlist(self, path)

    def get_struct_attr(self, name):
        return _manatee.Corpus_get_struct_attr(self, name)

    def freq_dist(self, *args):
        return _manatee.Corpus_freq_dist(self, *args)

    def freq_dist_from_fs(self, r, crit, limit, words, freqs, norms):
        return _manatee.Corpus_freq_dist_from_fs(self, r, crit, limit, words, freqs, norms)

    def Pos2Range(self, f):
        return _manatee.Corpus_Pos2Range(self, f)

    def Range2Pos(self, r):
        return _manatee.Corpus_Range2Pos(self, r)

    def eval_query(self, query):
        return _manatee.Corpus_eval_query(self, query)

    def filter_fstream(self, s):
        return _manatee.Corpus_filter_fstream(self, s)

    def count_rest(self, s):
        return _manatee.Corpus_count_rest(self, s)

    def count_structattr_vals(self, structname, saname, docsizes, freqs):
        return _manatee.Corpus_count_structattr_vals(self, structname, saname, docsizes, freqs)
    __swig_destroy__ = _manatee.delete_Corpus
    __del__ = lambda self: None
Corpus_swigregister = _manatee.Corpus_swigregister
Corpus_swigregister(Corpus)

class Concordance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Concordance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Concordance, name)
    __repr__ = _swig_repr

    def load_from_file(self, corp, filename):
        return _manatee.Concordance_load_from_file(self, corp, filename)

    def load_from_fileno(self, corp, fileno):
        return _manatee.Concordance_load_from_fileno(self, corp, fileno)

    def load_from_rs(self, corp, rs, sample_size, full_size):
        return _manatee.Concordance_load_from_rs(self, corp, rs, sample_size, full_size)

    def save(self, *args):
        return _manatee.Concordance_save(self, *args)

    def save_with_linegroup(self, filename):
        return _manatee.Concordance_save_with_linegroup(self, filename)

    def save_without_linegroup(self, filename):
        return _manatee.Concordance_save_without_linegroup(self, filename)

    def save_fileno(self, fileno, save_linegroup, partial):
        return _manatee.Concordance_save_fileno(self, fileno, save_linegroup, partial)

    def size(self):
        return _manatee.Concordance_size(self)

    def numofcolls(self):
        return _manatee.Concordance_numofcolls(self)

    def viewsize(self):
        return _manatee.Concordance_viewsize(self)

    def fullsize(self):
        return _manatee.Concordance_fullsize(self)

    def finished(self):
        return _manatee.Concordance_finished(self)

    def sync(self):
        return _manatee.Concordance_sync(self)

    def set_collocation(self, collnum, cquery, lctx, rctx, rank, exclude_kwic=False):
        return _manatee.Concordance_set_collocation(self, collnum, cquery, lctx, rctx, rank, exclude_kwic)

    def sort(self, crit, uniq=False):
        return _manatee.Concordance_sort(self, crit, uniq)

    def relfreq_sort(self, leftctx, rightctx, attr):
        return _manatee.Concordance_relfreq_sort(self, leftctx, rightctx, attr)

    def set_sorted_view(self, sorted):
        return _manatee.Concordance_set_sorted_view(self, sorted)

    def reduce_lines(self, crit):
        return _manatee.Concordance_reduce_lines(self, crit)

    def delete_pnfilter(self, collnum, positive):
        return _manatee.Concordance_delete_pnfilter(self, collnum, positive)

    def swap_kwic_coll(self, collnum):
        return _manatee.Concordance_swap_kwic_coll(self, collnum)

    def extend_kwic_coll(self, collnum):
        return _manatee.Concordance_extend_kwic_coll(self, collnum)

    def sort_idx(self, crit, chars, idxs, firstCharOnly):
        return _manatee.Concordance_sort_idx(self, crit, chars, idxs, firstCharOnly)

    def distribution(self, vals, beginnings, yrange, normalize=True):
        return _manatee.Concordance_distribution(self, vals, beginnings, yrange, normalize)

    def compute_ARF(self):
        return _manatee.Concordance_compute_ARF(self)

    def set_linegroup(self, linenum, group):
        return _manatee.Concordance_set_linegroup(self, linenum, group)

    def set_linegroup_globally(self, group):
        return _manatee.Concordance_set_linegroup_globally(self, group)

    def set_linegroup_at_pos(self, pos, group):
        return _manatee.Concordance_set_linegroup_at_pos(self, pos, group)

    def set_linegroup_from_conc(self, master):
        return _manatee.Concordance_set_linegroup_from_conc(self, master)

    def get_new_linegroup_id(self):
        return _manatee.Concordance_get_new_linegroup_id(self)

    def delete_linegroups(self, grps, invert):
        return _manatee.Concordance_delete_linegroups(self, grps, invert)

    def begs_FS(self):
        return _manatee.Concordance_begs_FS(self)

    def RS(self, useview=False, beg=0, end=0):
        return _manatee.Concordance_RS(self, useview, beg, end)

    def shuffle(self):
        return _manatee.Concordance_shuffle(self)

    def beg_at(self, idx):
        return _manatee.Concordance_beg_at(self, idx)

    def end_at(self, idx):
        return _manatee.Concordance_end_at(self, idx)

    def coll_beg_at(self, coll, idx):
        return _manatee.Concordance_coll_beg_at(self, coll, idx)

    def coll_end_at(self, coll, idx):
        return _manatee.Concordance_coll_end_at(self, coll, idx)

    def switch_aligned(self, corpname):
        return _manatee.Concordance_switch_aligned(self, corpname)

    def get_aligned(self, aligned):
        return _manatee.Concordance_get_aligned(self, aligned)

    def add_aligned(self, corpname):
        return _manatee.Concordance_add_aligned(self, corpname)

    def filter_aligned(self, corpname):
        return _manatee.Concordance_filter_aligned(self, corpname)

    def delete_subparts(self):
        return _manatee.Concordance_delete_subparts(self)

    def delete_struct_repeats(self, struc):
        return _manatee.Concordance_delete_struct_repeats(self, struc)

    def __init__(self, *args):
        this = _manatee.new_Concordance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def RS_using_view(self):
        return _manatee.Concordance_RS_using_view(self)

    def RS_using_view_limited(self, beg, end):
        return _manatee.Concordance_RS_using_view_limited(self, beg, end)

    def load_from_fs(self, corp, fs, sample_size, full_size):
        return _manatee.Concordance_load_from_fs(self, corp, fs, sample_size, full_size)

    def load_from_query(self, corp, query, sample_size, full_size):
        return _manatee.Concordance_load_from_query(self, corp, query, sample_size, full_size)

    def get_linegroup_stat(self, ids, freqs):
        return _manatee.Concordance_get_linegroup_stat(self, ids, freqs)

    def linegroup_sort(self, ids, strs):
        return _manatee.Concordance_linegroup_sort(self, ids, strs)

    def corp(self):
        return _manatee.Concordance_corp(self)
    __swig_destroy__ = _manatee.delete_Concordance
    __del__ = lambda self: None
Concordance_swigregister = _manatee.Concordance_swigregister
Concordance_swigregister(Concordance)

class KWICLines(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KWICLines, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KWICLines, name)
    __repr__ = _swig_repr

    def __init__(self, corp, r, left, right, kwica, ctxa, struca, refa, maxctx=0):
        this = _manatee.new_KWICLines(corp, r, left, right, kwica, ctxa, struca, refa, maxctx)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextcontext(self):
        return _manatee.KWICLines_nextcontext(self)

    def nextline(self):
        return _manatee.KWICLines_nextline(self)

    def skip(self, count):
        return _manatee.KWICLines_skip(self, count)

    def get_pos(self):
        return _manatee.KWICLines_get_pos(self)

    def get_kwiclen(self):
        return _manatee.KWICLines_get_kwiclen(self)

    def get_ctxbeg(self):
        return _manatee.KWICLines_get_ctxbeg(self)

    def get_ctxend(self):
        return _manatee.KWICLines_get_ctxend(self)

    def get_ref_list(self):
        return _manatee.KWICLines_get_ref_list(self)

    def get_refs(self):
        return _manatee.KWICLines_get_refs(self)

    def get_left(self):
        return _manatee.KWICLines_get_left(self)

    def get_kwic(self):
        return _manatee.KWICLines_get_kwic(self)

    def get_right(self):
        return _manatee.KWICLines_get_right(self)

    def get_linegroup(self):
        return _manatee.KWICLines_get_linegroup(self)
    __swig_destroy__ = _manatee.delete_KWICLines
    __del__ = lambda self: None
KWICLines_swigregister = _manatee.KWICLines_swigregister
KWICLines_swigregister(KWICLines)

class CollocItems(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollocItems, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollocItems, name)
    __repr__ = _swig_repr

    def __init__(self, conc, attr_name, sort_fun_code, minfreq, minbgr, fromw, tow, maxitems):
        this = _manatee.new_CollocItems(conc, attr_name, sort_fun_code, minfreq, minbgr, fromw, tow, maxitems)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _manatee.CollocItems_next(self)

    def eos(self):
        return _manatee.CollocItems_eos(self)

    def get_item(self):
        return _manatee.CollocItems_get_item(self)

    def get_freq(self):
        return _manatee.CollocItems_get_freq(self)

    def get_cnt(self):
        return _manatee.CollocItems_get_cnt(self)

    def get_bgr(self, bgr_code):
        return _manatee.CollocItems_get_bgr(self, bgr_code)
    __swig_destroy__ = _manatee.delete_CollocItems
    __del__ = lambda self: None
CollocItems_swigregister = _manatee.CollocItems_swigregister
CollocItems_swigregister(CollocItems)

class CorpRegion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CorpRegion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CorpRegion, name)
    __repr__ = _swig_repr

    def __init__(self, corp, attra, struca, ignore_nondef=True):
        this = _manatee.new_CorpRegion(corp, attra, struca, ignore_nondef)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def region(self, *args):
        return _manatee.CorpRegion_region(self, *args)
    __swig_destroy__ = _manatee.delete_CorpRegion
    __del__ = lambda self: None
CorpRegion_swigregister = _manatee.CorpRegion_swigregister
CorpRegion_swigregister(CorpRegion)

class SubCorpus(Corpus):
    __swig_setmethods__ = {}
    for _s in [Corpus]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubCorpus, name, value)
    __swig_getmethods__ = {}
    for _s in [Corpus]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubCorpus, name)
    __repr__ = _swig_repr

    def __init__(self, corp, sub, complement=False):
        this = _manatee.new_SubCorpus(corp, sub, complement)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _manatee.delete_SubCorpus
    __del__ = lambda self: None
SubCorpus_swigregister = _manatee.SubCorpus_swigregister
SubCorpus_swigregister(SubCorpus)


def create_subcorpus(*args):
    return _manatee.create_subcorpus(*args)
create_subcorpus = _manatee.create_subcorpus

def create_subcorpus_from_query(subcpath, corp, structname, query):
    return _manatee.create_subcorpus_from_query(subcpath, corp, structname, query)
create_subcorpus_from_query = _manatee.create_subcorpus_from_query

def find_subcorpora(subcdir, scs):
    return _manatee.find_subcorpora(subcdir, scs)
find_subcorpora = _manatee.find_subcorpora

def merge_subcorpora(subc1, subc2, subcout):
    return _manatee.merge_subcorpora(subc1, subc2, subcout)
merge_subcorpora = _manatee.merge_subcorpora
class map_int_sort_bigrams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_int_sort_bigrams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_int_sort_bigrams, name)
    __repr__ = _swig_repr

    def __init__(self, filename):
        this = _manatee.new_map_int_sort_bigrams(filename)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def maxid(self):
        return _manatee.map_int_sort_bigrams_maxid(self)

    def count(self, id):
        return _manatee.map_int_sort_bigrams_count(self, id)

    def value(self, id1, id2):
        return _manatee.map_int_sort_bigrams_value(self, id1, id2)
    __swig_destroy__ = _manatee.delete_map_int_sort_bigrams
    __del__ = lambda self: None
map_int_sort_bigrams_swigregister = _manatee.map_int_sort_bigrams_swigregister
map_int_sort_bigrams_swigregister(map_int_sort_bigrams)


def compute_ARF(s, freq, size):
    return _manatee.compute_ARF(s, freq, size)
compute_ARF = _manatee.compute_ARF

def compute_fALD(s, size):
    return _manatee.compute_fALD(s, size)
compute_fALD = _manatee.compute_fALD

def estimate_colloc_poss(s, collposs, maxcoll):
    return _manatee.estimate_colloc_poss(s, collposs, maxcoll)
estimate_colloc_poss = _manatee.estimate_colloc_poss
class CorpInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CorpInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CorpInfo, name)
    __repr__ = _swig_repr
    if _newclass:
        str2bool = staticmethod(_manatee.CorpInfo_str2bool)
    else:
        str2bool = _manatee.CorpInfo_str2bool

    def dump(self, indent=0):
        return _manatee.CorpInfo_dump(self, indent)

    def add_attr(self, path):
        return _manatee.CorpInfo_add_attr(self, path)

    def add_struct(self, path):
        return _manatee.CorpInfo_add_struct(self, path)

    def remove_attr(self, path):
        return _manatee.CorpInfo_remove_attr(self, path)

    def remove_struct(self, path):
        return _manatee.CorpInfo_remove_struct(self, path)

    def set_opt(self, path, val):
        return _manatee.CorpInfo_set_opt(self, path, val)

    def find_opt(self, path):
        return _manatee.CorpInfo_find_opt(self, path)

    def find_struct(self, path):
        return _manatee.CorpInfo_find_struct(self, path)

    def __init__(self):
        this = _manatee.new_CorpInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _manatee.delete_CorpInfo
    __del__ = lambda self: None
CorpInfo_swigregister = _manatee.CorpInfo_swigregister
CorpInfo_swigregister(CorpInfo)

def CorpInfo_str2bool(str):
    return _manatee.CorpInfo_str2bool(str)
CorpInfo_str2bool = _manatee.CorpInfo_str2bool


def loadCorpInfo(corp_name_or_path, no_defaults=False):
    return _manatee.loadCorpInfo(corp_name_or_path, no_defaults)
loadCorpInfo = _manatee.loadCorpInfo

def loadCorpInfoDefaults(corp_name_or_path):
    return _manatee.loadCorpInfoDefaults(corp_name_or_path)
loadCorpInfoDefaults = _manatee.loadCorpInfoDefaults

def loadCorpInfoNoDefaults(corp_name_or_path):
    return _manatee.loadCorpInfoNoDefaults(corp_name_or_path)
loadCorpInfoNoDefaults = _manatee.loadCorpInfoNoDefaults
class kwitem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kwitem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kwitem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["id1"] = _manatee.kwitem_id1_set
    __swig_getmethods__["id1"] = _manatee.kwitem_id1_get
    if _newclass:
        id1 = _swig_property(_manatee.kwitem_id1_get, _manatee.kwitem_id1_set)
    __swig_setmethods__["id2"] = _manatee.kwitem_id2_set
    __swig_getmethods__["id2"] = _manatee.kwitem_id2_get
    if _newclass:
        id2 = _swig_property(_manatee.kwitem_id2_get, _manatee.kwitem_id2_set)
    __swig_setmethods__["score"] = _manatee.kwitem_score_set
    __swig_getmethods__["score"] = _manatee.kwitem_score_get
    if _newclass:
        score = _swig_property(_manatee.kwitem_score_get, _manatee.kwitem_score_set)
    __swig_setmethods__["str"] = _manatee.kwitem_str_set
    __swig_getmethods__["str"] = _manatee.kwitem_str_get
    if _newclass:
        str = _swig_property(_manatee.kwitem_str_get, _manatee.kwitem_str_set)
    __swig_setmethods__["freqs"] = _manatee.kwitem_freqs_set
    __swig_getmethods__["freqs"] = _manatee.kwitem_freqs_get
    if _newclass:
        freqs = _swig_property(_manatee.kwitem_freqs_get, _manatee.kwitem_freqs_set)

    def get_freqs(self, size):
        return _manatee.kwitem_get_freqs(self, size)
    __swig_destroy__ = _manatee.delete_kwitem
    __del__ = lambda self: None
kwitem_swigregister = _manatee.kwitem_swigregister
kwitem_swigregister(kwitem)

class Keyword(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Keyword, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Keyword, name)
    __repr__ = _swig_repr

    def __init__(self, c1, c2, wl1, wl2, N, maxlen, minfreq, maxfreq, blacklist, whitelist, frqtype, addfreqs, pos_filters, neg_filters, progress):
        this = _manatee.new_Keyword(c1, c2, wl1, wl2, N, maxlen, minfreq, maxfreq, blacklist, whitelist, frqtype, addfreqs, pos_filters, neg_filters, progress)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _manatee.Keyword_size(self)

    def next(self):
        return _manatee.Keyword_next(self)

    def get_totals(self):
        return _manatee.Keyword_get_totals(self)
    __swig_destroy__ = _manatee.delete_Keyword
    __del__ = lambda self: None
Keyword_swigregister = _manatee.Keyword_swigregister
Keyword_swigregister(Keyword)

class MLTStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLTStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MLTStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    KEEP = _manatee.MLTStream_KEEP
    CONCAT = _manatee.MLTStream_CONCAT
    DELETE = _manatee.MLTStream_DELETE
    INSERT = _manatee.MLTStream_INSERT
    MORPH = _manatee.MLTStream_MORPH

    def change_type(self):
        return _manatee.MLTStream_change_type(self)

    def change_size(self):
        return _manatee.MLTStream_change_size(self)

    def change_newsize(self):
        return _manatee.MLTStream_change_newsize(self)

    def concat_value(self, attrn):
        return _manatee.MLTStream_concat_value(self, attrn)

    def orgpos(self):
        return _manatee.MLTStream_orgpos(self)

    def newpos(self):
        return _manatee.MLTStream_newpos(self)

    def end(self):
        return _manatee.MLTStream_end(self)

    def newfinal(self):
        return _manatee.MLTStream_newfinal(self)

    def next(self):
        return _manatee.MLTStream_next(self)

    def find_org(self, pos):
        return _manatee.MLTStream_find_org(self, pos)

    def find_new(self, pos):
        return _manatee.MLTStream_find_new(self, pos)
    __swig_destroy__ = _manatee.delete_MLTStream
    __del__ = lambda self: None
MLTStream_swigregister = _manatee.MLTStream_swigregister
MLTStream_swigregister(MLTStream)


def new_TokenLevel(path):
    return _manatee.new_TokenLevel(path)
new_TokenLevel = _manatee.new_TokenLevel

def full_level(level):
    return _manatee.full_level(level)
full_level = _manatee.full_level

def wordlist(wl, wlpat, addfreqs, sortfreq, whitelist, blacklist, wlminfreq, wlmaxfreq, wlmaxitems, nonwordre):
    return _manatee.wordlist(wl, wlpat, addfreqs, sortfreq, whitelist, blacklist, wlminfreq, wlmaxfreq, wlmaxitems, nonwordre)
wordlist = _manatee.wordlist

def calc_average_structattr(c, structname, attrname, q):
    return _manatee.calc_average_structattr(c, structname, attrname, q)
calc_average_structattr = _manatee.calc_average_structattr
class regexp_pattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, regexp_pattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, regexp_pattern, name)
    __repr__ = _swig_repr

    def __init__(self, pattern, locale=None, encoding=None):
        this = _manatee.new_regexp_pattern(pattern, locale, encoding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def match(self, str):
        return _manatee.regexp_pattern_match(self, str)
    __swig_destroy__ = _manatee.delete_regexp_pattern
    __del__ = lambda self: None
regexp_pattern_swigregister = _manatee.regexp_pattern_swigregister
regexp_pattern_swigregister(regexp_pattern)

# This file is compatible with both classic and new-style classes.


