#!/usr/bin/python3
#  Copyright (c) 2008-2022  Pavel Rychly, Milos Jakubicek, Vit Baisa

import sys
import os
from io import open

try:
    from urllib.parse import quote_plus
except:
    from urllib import quote_plus

import manatee
manatee.setEncoding("UTF-8")

def create_subcorpus (corp, subcpath, strucname, query):
    sys.stderr.write("Subcorpus %s..." % subcpath)
    if strucname == "-CQL-":
        r = manatee.create_subcorpus (subcpath, corp.eval_query (query), None)
    else:
        r = manatee.create_subcorpus (subcpath, corp, strucname, query)
    if not r:
        sys.stderr.write("warning: empty subcorpus for query '%s %s'\n"
                         % (strucname, query))
        return False
    sys.stderr.write("done\n")
    return True

def generate_Makefile(corp, subclist, attrs, stats):
    try:
        corp = os.path.realpath(corp, strict=True)
    except OsError:
        pass
    print("""\
CORPUS={corpus}
SUBC={subc}
ATTRS={attrs}
STATS={frqs}
FILES:=$(addsuffix .subc,$(SUBC)) $(foreach STAT,$(STATS),$(addsuffix .$(STAT),$(foreach ATTR,$(ATTRS),$(addsuffix .$(ATTR),$(SUBC)))))
.PRECIOUS: $(FILES)
.SECONDARY:
all: $(FILES)
.SECONDEXPANSION:
""".format(subc=" ".join([s[0] for s in subclist]),
           attrs=" ".join(attrs),
           frqs=" ".join(stats),
           corpus=corp))
    statrules = []
    for stat in ["arf", "frq", "aldf", "docf"]:
        statrules.append([stat, "$$(basename %).subc"])
    statrules[0][1] += " %.frq"
    for s in statrules:
        print("%%.%s: %s" % (s[0], s[1]))
        print("\tmkstats $(CORPUS) $(subst .,,$(suffix $*)) %s $(basename $*).subc" % s[0])
    for s in subclist:
        print("%s.subc: \n\t%s" % s)

def process_def_file (corp, subcdir, infile):
    sys.stderr.write("Compiling subcorpora...\n")
    infile = open(infile)
    frqattrs = []
    attrlist = corp.get_conf("ATTRLIST")
    subc_files = []
    while 1:
        line = infile.readline()
        if not line:
            break
        if line.startswith('#') or not line.strip():
            # ignore comments and empty lines
            continue
        if line.startswith('*FREQLISTATTRS'):
            for attr in line.split()[1:]:
                if attr not in attrlist:
                    print(attr, "is listed in FREQLISTATTRS but is not a valid attribute, skipping", file=sys.stderr)
                else:
                    frqattrs.append (attr)
        elif line.startswith('='):
            subcname = quote_plus(line[1:].strip().encode('UTF-8'))
            structname = infile.readline().strip()
            query = infile.readline().strip()
            if query.startswith('Q:'): # subcorpus from concordance, skip
                continue
            if dry_run:
                cmd = "mksubc '$(CORPUS)' '%s.subc' '%s' '%s'" %\
                       (subcname, structname, query)
                subc_files.append((subcname, cmd))
            else:
                subcpath = "%s/%s.subc" % (subcdir, subcname)
                not_empty = create_subcorpus (corp, subcpath, structname, query)
                sys.stderr.flush()
                if not_empty and compile_stats:
                    for attr in frqattrs:
                        for stat in compile_stats:
                            os.system ("mkstats '%s' '%s' '%s' '%s'" %\
                                       (corp.get_confpath(), attr, stat, subcpath))
        else:
            print('Subcorpus definition file format error: "', line.strip(),
                    '"', file=sys.stderr)
    if dry_run:
        generate_Makefile(corp.get_confpath(), subc_files, frqattrs, compile_stats)

if __name__ == "__main__":
    compile_stats = []
    dry_run = False
    sys.argv = sys.argv[1:]
    if len(sys.argv) > 1 and sys.argv[0] in ["-s", "-S"]:
        compile_stats = sys.argv[1].split(",")
        if sys.argv[0] == "-S":
            dry_run = True
        sys.argv = sys.argv[2:]
    if len(sys.argv) > 2:
        sys.argv[0] = manatee.Corpus(sys.argv[0])
    if len(sys.argv) == 4 and not compile_stats:
        create_subcorpus (*sys.argv)
    elif len(sys.argv) == 3:
        os.makedirs(sys.argv[1], exist_ok=True)
        process_def_file (*sys.argv)
    else:
        stat_names = ["frq", "arf", "docf", "fid", "aldf"]
        usage = """\
Usage: mksubc [-s STATS | -S STATS] CORPUS SUBCORP_DIR SUBCORP_DEF_FILE
    or mksubc CORPUS SUBCORP_FILE STRUCT_NAME QUERY
Creates subcorpora (*.subc) files according to subcorpus
definition file (see doc/subcdef.txt) (first usage) or
a single subcorpus according to cmdline parameters (second usage)\n
-s STATS          compute statistics for all FREQLISTATTRS,
                  STATS is a comma separated list of statistics,
                  which might be one of {}
-S STATS          dry run mode; same like -s but only generate a Makefile
                  STATS may be empty string
CORPUS            corpus configuration file
SUBCORP_DIR       directory for the .subc to be stored
SUBCORP_DEF_FILE  subcorpus definition file
SUBCORP_FILE      subcorpus .subc file
STRUCT_NAME       subcorpus structure
QUERY             subcorpus criteria for STRUCT_NAME""".format(", ".join(stat_names))
        print(usage, file=sys.stderr)

# vim: ts=4 sw=4 sta et sts=4 si cindent tw=80:
